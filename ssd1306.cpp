#include "ssd1306.h"


void OledI2CDriver::ssd1306_write_command(I2C_HandleTypeDef *hi2c, uint8_t command) {
    ssd1306_write_buffer(hi2c, 0x00, &command, 1);
}


void OledI2CDriver::ssd1306_write_buffer(I2C_HandleTypeDef *hi2c, uint8_t mem_addr, uint8_t* buffer, uint16_t size) {
    // Wait until I2C is ready
    while (LL_I2C_IsActiveFlag_BUSY(hi2c->Instance));

    // Start I2C transmission to device
    LL_I2C_HandleTransfer(hi2c->Instance, SSD1306_I2C_ADDR, LL_I2C_ADDRSLAVE_7BIT, size + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

    // Send memory address
    while (!LL_I2C_IsActiveFlag_TXE(hi2c->Instance));
    LL_I2C_TransmitData8(hi2c->Instance, mem_addr);

    // Send buffer data
    for (uint16_t i = 0; i < size; i++) {
        while (!LL_I2C_IsActiveFlag_TXE(hi2c->Instance));
        LL_I2C_TransmitData8(hi2c->Instance, buffer[i]);
    }

    // Wait for the transfer to complete
    while (!LL_I2C_IsActiveFlag_STOP(hi2c->Instance));

    // Clear the STOP flag
    LL_I2C_ClearFlag_STOP(hi2c->Instance);
}


//  Initialize the OLED screen
void OledI2CDriver::ssd1306_init(I2C_HandleTypeDef *hi2c){
    // Wait for the screen to boot

    ssd1306_write_command(hi2c, 0xAE);   // Display off
	ssd1306_write_command(hi2c, 0xC8);   // Set COM Output Scan Direction
	ssd1306_write_command(hi2c, 0x10);   // Set high column address
	ssd1306_write_command(hi2c, 0xA1);   // Set segment re-map 0 to 127
	ssd1306_write_command(hi2c, 0x00);   // No offset
	ssd1306_write_command(hi2c, 0xDB);   // Set vcomh
	ssd1306_write_command(hi2c, 0x20);   // 0x20,0.77xVcc
	ssd1306_write_command(hi2c, 0x8D);   // Set DC-DC enable
	ssd1306_write_command(hi2c, 0x14);   //
    ssd1306_write_command(hi2c, 0xAF);   // Turn on SSD1306 panel

    // Clear screen by filling with black color
    for(uint32_t i = 0; i < sizeof(SSD1306_Buffer); i++){
		SSD1306_Buffer[i] = 0;
	}

    ssd1306_update_screen(hi2c); // Flush buffer to screen

    // Set default values for screen object
    CurrentX = 0;
    CurrentY = 0;
    Inverted = 0;
}


//  Write the screenbuffer with changed to the screen
void OledI2CDriver::ssd1306_update_screen(I2C_HandleTypeDef *hi2c){
    for (uint8_t i = 0; i < 8; i++) {
    	ssd1306_write_command(hi2c, 0xB0 + i);

        ssd1306_write_buffer(hi2c, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
    }
}


//  Draw one pixel in the screenbuffer
void OledI2CDriver::ssd1306_draw_pixel(uint8_t x, uint8_t y, SSD1306_COLOR color){
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
        return; // Don't write outside the buffer
    }

	uint16_t index = x + (y / 8) * SSD1306_WIDTH;
	uint8_t bit_mask = 1 << (y % 8);

	if (color != Inverted) {
		SSD1306_Buffer[index] |= bit_mask; // Set pixel
	} else {
		SSD1306_Buffer[index] &= ~bit_mask; // Clear pixel
	}
}


//  Draw 1 char to the screen buffer
char OledI2CDriver::ssd1306_write_char(char ch){
    uint32_t b;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (CurrentX + FONT_WIDTH) || SSD1306_HEIGHT <= (CurrentY + FONT_HEIGHT)) {
        return 0; // Not enough space on current line
    }

    uint16_t idx;
    if(ch == 'k'){
    	idx = 58 * FONT_HEIGHT;
    }else if(ch == 'm'){
    	idx = 59 * FONT_HEIGHT;
    }else if(ch == 'z'){
    	idx = 60 * FONT_HEIGHT;
    }else{
    	idx = (ch - ' ') * FONT_HEIGHT;
    }

    // Translate font to screenbuffer
    for (uint32_t i = 0; i < FONT_HEIGHT; i++){
    	b = Font7x10[idx + i];

        for (uint32_t j = 0; j < FONT_WIDTH; j++) {
            if ((b << j) & 0x8000){
                ssd1306_draw_pixel(CurrentX + j, (CurrentY + i), BLUE);
            }else{
                ssd1306_draw_pixel(CurrentX + j, (CurrentY + i), BLACK);
            }
        }
    }
    CurrentX += FONT_WIDTH; // The current space is now taken

    return ch; // Return written char for validation
}


//  Write full string to screenbuffer
char OledI2CDriver::ssd1306_write_string(const char* str){
    // Write until null-byte
    while (*str){ // TODO: get rid of
        if (ssd1306_write_char(*str) != *str){
            return *str; // Char could not be written
        }
        str++; // Next char
    }

    return *str; // Everything ok
}


//  Set cursor position
void OledI2CDriver::ssd1306_set_cursor(uint8_t x, uint8_t y){
	CurrentX = x;
	CurrentY = y;
}


// Bitmap for font
const uint16_t Font7x10 [] = {
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // sp
0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // !
0x2800, 0x2800, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // "
0x2400, 0x2400, 0x7C00, 0x2400, 0x4800, 0x7C00, 0x4800, 0x4800, 0x0000, 0x0000,  // #
0x3800, 0x5400, 0x5000, 0x3800, 0x1400, 0x5400, 0x5400, 0x3800, 0x1000, 0x0000,  // $
0x2000, 0x5400, 0x5800, 0x3000, 0x2800, 0x5400, 0x1400, 0x0800, 0x0000, 0x0000,  // %
0x1000, 0x2800, 0x2800, 0x1000, 0x3400, 0x4800, 0x4800, 0x3400, 0x0000, 0x0000,  // &
0x1000, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // '
0x0800, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x1000, 0x0800,  // (
0x2000, 0x1000, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x1000, 0x2000,  // )
0x1000, 0x3800, 0x1000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // *
0x0000, 0x0000, 0x1000, 0x1000, 0x7C00, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000,  // +
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ,
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000,  // -
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // .
0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x0000, 0x0000,  // /
0x3800, 0x4400, 0x4400, 0x5400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 0
0x1000, 0x3000, 0x5000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // 1
0x3800, 0x4400, 0x4400, 0x0400, 0x0800, 0x1000, 0x2000, 0x7C00, 0x0000, 0x0000,  // 2
0x3800, 0x4400, 0x0400, 0x1800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 3
0x0800, 0x1800, 0x2800, 0x2800, 0x4800, 0x7C00, 0x0800, 0x0800, 0x0000, 0x0000,  // 4
0x7C00, 0x4000, 0x4000, 0x7800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 5
0x3800, 0x4400, 0x4000, 0x7800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 6
0x7C00, 0x0400, 0x0800, 0x1000, 0x1000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000,  // 7
0x3800, 0x4400, 0x4400, 0x3800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 8
0x3800, 0x4400, 0x4400, 0x4400, 0x3C00, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 9
0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // :
0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ;
0x0000, 0x0000, 0x0C00, 0x3000, 0x4000, 0x3000, 0x0C00, 0x0000, 0x0000, 0x0000,  // <
0x0000, 0x0000, 0x0000, 0x7C00, 0x0000, 0x7C00, 0x0000, 0x0000, 0x0000, 0x0000,  // =
0x0000, 0x0000, 0x6000, 0x1800, 0x0400, 0x1800, 0x6000, 0x0000, 0x0000, 0x0000,  // >
0x3800, 0x4400, 0x0400, 0x0800, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // ?
0x3800, 0x4400, 0x4C00, 0x5400, 0x5C00, 0x4000, 0x4000, 0x3800, 0x0000, 0x0000,  // @
0x1000, 0x2800, 0x2800, 0x2800, 0x2800, 0x7C00, 0x4400, 0x4400, 0x0000, 0x0000,  // A
0x7800, 0x4400, 0x4400, 0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x0000, 0x0000,  // B
0x3800, 0x4400, 0x4000, 0x4000, 0x4000, 0x4000, 0x4400, 0x3800, 0x0000, 0x0000,  // C
0x7000, 0x4800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4800, 0x7000, 0x0000, 0x0000,  // D
0x7C00, 0x4000, 0x4000, 0x7C00, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // E
0x7C00, 0x4000, 0x4000, 0x7800, 0x4000, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // F
0x3800, 0x4400, 0x4000, 0x4000, 0x5C00, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // G
0x4400, 0x4400, 0x4400, 0x7C00, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // H
0x3800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x3800, 0x0000, 0x0000,  // I
0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // J
0x4400, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // K
0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // L
0x4400, 0x6C00, 0x6C00, 0x5400, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // M
0x4400, 0x6400, 0x6400, 0x5400, 0x5400, 0x4C00, 0x4C00, 0x4400, 0x0000, 0x0000,  // N
0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // O
0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // P
0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x5400, 0x3800, 0x0400, 0x0000,  // Q
0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // R
0x3800, 0x4400, 0x4000, 0x3000, 0x0800, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // S
0x7C00, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // T
0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // U
0x4400, 0x4400, 0x4400, 0x2800, 0x2800, 0x2800, 0x1000, 0x1000, 0x0000, 0x0000,  // V
0x4400, 0x4400, 0x5400, 0x5400, 0x5400, 0x6C00, 0x2800, 0x2800, 0x0000, 0x0000,  // W
0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x2800, 0x2800, 0x4400, 0x0000, 0x0000,  // X
0x4400, 0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // Y
0x4000, 0x4000, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4400, 0x0000, 0x0000,  // k
0x0000, 0x0000, 0x7800, 0x5400, 0x5400, 0x5400, 0x5400, 0x5400, 0x0000, 0x0000,  // m
0x0000, 0x0000, 0x7C00, 0x0800, 0x1000, 0x2000, 0x4000, 0x7C00, 0x0000, 0x0000,  // z
};

