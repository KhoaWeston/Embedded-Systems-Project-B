#include "ssd1306.h"


void OledI2cDriver::write_command(uint8_t command) {
	ASSERT(command >= 0x00 && command <= 0xFF);

	write_buffer(0x00, &command, 1);
}


// ChatGPT aided
void OledI2cDriver::write_buffer(uint8_t mem_addr, uint8_t* buff, uint16_t size) {
	ASSERT(mem_addr >= 0x00 && mem_addr <= 0xFF);
	ASSERT(buff != nullptr);
	ASSERT(size > 0 && size <= 0xFFFF);

	// Wait until I2C is ready
	while (LL_I2C_IsActiveFlag_BUSY(i2c_handle->Instance));

	// Start I2C transmission
	LL_I2C_HandleTransfer(i2c_handle->Instance, I2C_ADDR, LL_I2C_ADDRSLAVE_7BIT, size + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

	// Send the memory address
	while (!LL_I2C_IsActiveFlag_TXE(i2c_handle->Instance));
	LL_I2C_TransmitData8(i2c_handle->Instance, mem_addr);

	// Send the buffer data
	for (uint16_t i = 0; i < size; i++) {
		while (!LL_I2C_IsActiveFlag_TXE(i2c_handle->Instance));
		LL_I2C_TransmitData8(i2c_handle->Instance, buff[i]);
	}

	// Wait for the transfer to complete
	while (!LL_I2C_IsActiveFlag_STOP(i2c_handle->Instance));

	// Clear the STOP flag
	LL_I2C_ClearFlag_STOP(i2c_handle->Instance);
}


OledI2cDriver::OledI2cDriver(void){ // @suppress("Class members should be properly initialized")
	// Clear screen by filling with black color
	for(uint32_t i = 0; i < sizeof(buffer); i++){
		buffer[i] = 0;
	}

	// Set default values for screen object
	currentX = 0;
	currentY = 0;
}


//  Initialize the OLED screen
void OledI2cDriver::I2C_init(I2C_HandleTypeDef *hi2c){
	ASSERT(hi2c != nullptr);
	i2c_handle = hi2c;

	write_command(0xAE);	// Display off
	write_command(0xC8);	// Set COM Output Scan Direction
	write_command(0x10);	// Set high column address
	write_command(0xA1);	// Set segment re-map 0 to 127
	write_command(0x00);	// No offset
	write_command(0xDB);	// Set vcomh
	write_command(0x20);	// 0x20,0.77xVcc
	write_command(0x8D);	// Set DC-DC enable
	write_command(0x14);	//
	write_command(0xAF);	// Turn on SSD1306 panel

	for(uint8_t i=0; i < OLED_HEIGHT / PAGE_SIZE; i++) {
		update_screen(i); 		// Flush buffer to screen
	}
}


//  Write the screenbuffer with changed to the screen
void OledI2cDriver::update_screen(uint8_t row){
	// Check if invalid line, return without doing anything
	ASSERT(row < OLED_HEIGHT / PAGE_SIZE);

	write_command(0xB0 + row);
	write_buffer(0x40, &buffer[OLED_WIDTH * row], OLED_WIDTH);
}


//  Draw one pixel in the screenbuffer
void OledI2cDriver::draw_pixel(uint8_t x, uint8_t y, OledColors color){
	// Check if cursor is outside the buffer
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT){
		return;
	}

	uint16_t index = x + (y / PAGE_SIZE) * OLED_WIDTH;
	uint8_t bit_mask = 1 << (y % 8);

	if (color != BLACK) {
		buffer[index] |= bit_mask; // Set pixel
	} else {
		buffer[index] &= ~bit_mask; // Clear pixel
	}
}


//  Draw 1 char to the screen buffer
void OledI2cDriver::write_char(char ch){
	ASSERT(ch >= ' ' && ch <= 'z');

	// Check remaining space on current line
	if (OLED_WIDTH <= (currentX + FONT_WIDTH) || OLED_HEIGHT <= (currentY + FONT_HEIGHT)) {
		return;
	}

	uint16_t idx;
	if(ch == 'k'){
		idx = 58 * FONT_HEIGHT;
	}else if(ch == 'm'){
		idx = 59 * FONT_HEIGHT;
	}else if(ch == 'z'){
		idx = 60 * FONT_HEIGHT;
	}else{
		idx = (ch - ' ') * FONT_HEIGHT;
	}

	// Translate font to screenbuffer
	for (uint32_t i = 0; i < FONT_HEIGHT; i++){
		uint32_t b = Font7x10[idx + i];

		for (uint32_t j = 0; j < FONT_WIDTH; j++) {
			if ((b << j) & 0x8000){
				draw_pixel(currentX + j, (currentY + i), BLUE);
			}else{
				draw_pixel(currentX + j, (currentY + i), BLACK);
			}
		}
	}
	currentX += FONT_WIDTH; // The current space is now taken
}


//  Write full string to screenbuffer
void OledI2cDriver::write_string(const char* str){
	ASSERT(str != nullptr);

	// Write until null-byte
	while (*str){
		write_char(*str);
		str++; // Next char
	}
}


//  Set cursor position
void OledI2cDriver::set_cursor(uint8_t x, uint8_t y){
	ASSERT(x < OLED_WIDTH && y < OLED_HEIGHT);

	currentX = x;
	currentY = y;
}


// Bitmap for font
const uint16_t Font7x10 [] = {
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // sp
		0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // !
		0x2800, 0x2800, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // "
		0x2400, 0x2400, 0x7C00, 0x2400, 0x4800, 0x7C00, 0x4800, 0x4800, 0x0000, 0x0000,  // #
		0x3800, 0x5400, 0x5000, 0x3800, 0x1400, 0x5400, 0x5400, 0x3800, 0x1000, 0x0000,  // $
		0x2000, 0x5400, 0x5800, 0x3000, 0x2800, 0x5400, 0x1400, 0x0800, 0x0000, 0x0000,  // %
		0x1000, 0x2800, 0x2800, 0x1000, 0x3400, 0x4800, 0x4800, 0x3400, 0x0000, 0x0000,  // &
		0x1000, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // '
		0x0800, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x1000, 0x0800,  // (
		0x2000, 0x1000, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x1000, 0x2000,  // )
		0x1000, 0x3800, 0x1000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // *
		0x0000, 0x0000, 0x1000, 0x1000, 0x7C00, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000,  // +
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ,
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000,  // -
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // .
		0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x0000, 0x0000,  // /
		0x3800, 0x4400, 0x4400, 0x5400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 0
		0x1000, 0x3000, 0x5000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // 1
		0x3800, 0x4400, 0x4400, 0x0400, 0x0800, 0x1000, 0x2000, 0x7C00, 0x0000, 0x0000,  // 2
		0x3800, 0x4400, 0x0400, 0x1800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 3
		0x0800, 0x1800, 0x2800, 0x2800, 0x4800, 0x7C00, 0x0800, 0x0800, 0x0000, 0x0000,  // 4
		0x7C00, 0x4000, 0x4000, 0x7800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 5
		0x3800, 0x4400, 0x4000, 0x7800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 6
		0x7C00, 0x0400, 0x0800, 0x1000, 0x1000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000,  // 7
		0x3800, 0x4400, 0x4400, 0x3800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 8
		0x3800, 0x4400, 0x4400, 0x4400, 0x3C00, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 9
		0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // :
		0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ;
		0x0000, 0x0000, 0x0C00, 0x3000, 0x4000, 0x3000, 0x0C00, 0x0000, 0x0000, 0x0000,  // <
		0x0000, 0x0000, 0x0000, 0x7C00, 0x0000, 0x7C00, 0x0000, 0x0000, 0x0000, 0x0000,  // =
		0x0000, 0x0000, 0x6000, 0x1800, 0x0400, 0x1800, 0x6000, 0x0000, 0x0000, 0x0000,  // >
		0x3800, 0x4400, 0x0400, 0x0800, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // ?
		0x3800, 0x4400, 0x4C00, 0x5400, 0x5C00, 0x4000, 0x4000, 0x3800, 0x0000, 0x0000,  // @
		0x1000, 0x2800, 0x2800, 0x2800, 0x2800, 0x7C00, 0x4400, 0x4400, 0x0000, 0x0000,  // A
		0x7800, 0x4400, 0x4400, 0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x0000, 0x0000,  // B
		0x3800, 0x4400, 0x4000, 0x4000, 0x4000, 0x4000, 0x4400, 0x3800, 0x0000, 0x0000,  // C
		0x7000, 0x4800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4800, 0x7000, 0x0000, 0x0000,  // D
		0x7C00, 0x4000, 0x4000, 0x7C00, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // E
		0x7C00, 0x4000, 0x4000, 0x7800, 0x4000, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // F
		0x3800, 0x4400, 0x4000, 0x4000, 0x5C00, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // G
		0x4400, 0x4400, 0x4400, 0x7C00, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // H
		0x3800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x3800, 0x0000, 0x0000,  // I
		0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // J
		0x4400, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // K
		0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // L
		0x4400, 0x6C00, 0x6C00, 0x5400, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // M
		0x4400, 0x6400, 0x6400, 0x5400, 0x5400, 0x4C00, 0x4C00, 0x4400, 0x0000, 0x0000,  // N
		0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // O
		0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // P
		0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x5400, 0x3800, 0x0400, 0x0000,  // Q
		0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // R
		0x3800, 0x4400, 0x4000, 0x3000, 0x0800, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // S
		0x7C00, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // T
		0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // U
		0x4400, 0x4400, 0x4400, 0x2800, 0x2800, 0x2800, 0x1000, 0x1000, 0x0000, 0x0000,  // V
		0x4400, 0x4400, 0x5400, 0x5400, 0x5400, 0x6C00, 0x2800, 0x2800, 0x0000, 0x0000,  // W
		0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x2800, 0x2800, 0x4400, 0x0000, 0x0000,  // X
		0x4400, 0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // Y
		0x4000, 0x4000, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4400, 0x0000, 0x0000,  // k
		0x0000, 0x0000, 0x7800, 0x5400, 0x5400, 0x5400, 0x5400, 0x5400, 0x0000, 0x0000,  // m
		0x0000, 0x0000, 0x7C00, 0x0800, 0x1000, 0x2000, 0x4000, 0x7C00, 0x0000, 0x0000,  // z
};

